@page "/show-image"
@inject FileSystemAccessService FileSystemAccessService
@inject IJSRuntime jSRuntime

<PageTitle>ImageEditor</PageTitle>
<div>
    <button @onclick="OpenFilePicker" class="btn btn-primary">Open Image</button>
</div>
<div>
    <canvas @ref=CanvasReference width=@CanvasSize height=@CanvasSize></canvas>
</div>

@code {
    private FileSystemFileHandle? FileHandle;
    private FileHandler? File;
    private IJSObjectReference? JSImageBitmap;
    private ElementReference CanvasReference { get; set; }
    private double CanvasSize = 600;

    private double ImageDrawHeight;
    private double ImageDrawWidth;

    private IJSObjectReference? JSCanvas;
    private IJSObjectReference? JS2dContext;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        JSCanvas = await jSRuntime.InvokeAsync<IJSObjectReference>("jSReference", CanvasReference);
        JS2dContext = await JSCanvas.InvokeAsync<IJSObjectReference>("getContext", "2d");
    }

    protected async Task OpenFilePicker()
    {
        try
        {
            var options = new OpenFilePickerOptions()
            {
                Types = new FilePickerAcceptType[]
                {
                new FilePickerAcceptType()
                {
                    Description = "Images",
                    Accept = new() { { "image/*", new string[] { ".png", ".gif", ".jpeg", ".jpg" } } }
                }
                },
                Multiple = false,
                StartIn = WellKnownDirectory.Pictures
            };
            var fileHandlers = await FileSystemAccessService.ShowOpenFilePickerAsync(options);
            FileHandle = fileHandlers.Single();
        }
        catch(JSException jsex)
        {
            Console.WriteLine(jsex);
        }
        finally
        {
            if (FileHandle != null)
            {
                File = await FileHandle.GetFileAsync();
                var jsBlob = File.JSReference;
                JSImageBitmap = await jSRuntime.InvokeAsync<IJSObjectReference>("createImageBitmap", jsBlob);
                await DrawImage();
            }
        }
    }

    public async Task DrawImage()
    {
        if (JS2dContext == null) return;
        var imageWidth = await jSRuntime.InvokeAsync<double>("getAttribute", JSImageBitmap, "width");
        var imageHeight = await jSRuntime.InvokeAsync<double>("getAttribute", JSImageBitmap, "height");
        ImageDrawWidth = (imageWidth > imageHeight ? 1 : imageWidth / imageHeight) * CanvasSize;
        ImageDrawHeight = (imageWidth < imageHeight ? 1 : imageHeight / imageWidth) * CanvasSize;
        await jSRuntime.InvokeVoidAsync("setAttribute", JSCanvas, "width", ImageDrawWidth);
        await jSRuntime.InvokeVoidAsync("setAttribute", JSCanvas, "height", ImageDrawHeight);
        await JS2dContext.InvokeVoidAsync("drawImage", JSImageBitmap, 0, 0, ImageDrawWidth, ImageDrawHeight);
    }
}

