@page "/counter/{countInit?}"
@inject ILogger<Counter> Logger

<PageTitle>Counter</PageTitle>

<h1>Counter init is : @CountInit</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<EditForm Model="@starship" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <p>
        <label>
            Identifier: <InputText @bind-Value="starship.Identifier"></InputText>
        </label>
    </p>
    <p>
        <label>
            Description (optional): <InputTextArea @bind-Value="starship.Description"></InputTextArea>
        </label>
    </p>
    <p>
        <label>
            Primary Classification: <InputSelect @bind-Value="starship.Classification">
                <option value="">Select classification ...</option>
                <option value="Exploration">Exploration</option>
                <option value="Diplomacy">Diplomacy</option>
                <option value="Defense">Defense</option>
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Maximum Accommodation:<InputNumber @bind-Value="starship.MaximumAccommodation" DisplayName="Production Date"></InputNumber>
        </label>
    </p>
    <p>
        <label>
            Engineering Approval:<InputCheckbox @bind-Value="starship.IsValidatedDesign"></InputCheckbox>
        </label>
    </p>
    <p>
        <label>
            Production Date:<InputDate @bind-Value="starship.ProductionDate"></InputDate>
        </label>
    </p>
    <button type="submit">Submit</button>
</EditForm>

@code {
    private Starship starship = new() { ProductionDate = DateTime.UtcNow };

    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        // Process the valid form
    }
    [Parameter]
    public string? CountInit { get; set; }
    private int currentCount = 0;

    protected override void OnParametersSet()
    {
        CountInit = CountInit ?? "1";
    }
    private void IncrementCount()
    {
        currentCount++;
        if (currentCount > 5)
        {
            throw new InvalidOperationException("Current count is too big!");
        }
    }

}
