@page "/fetchdata"
@using BlazorAssmeblyNoHost.Options
@inject HttpClient Http
@inject ILogger<FetchData> Logger
@implements IDisposable

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<EditForm EditContext="editContext" OnValidSubmit="@HandleValidSubmit">
     <label>
        Type 1:
        <InputCheckbox @bind-Value="holodeck.Type1" />
    </label>
    <label>
        Type 2:
        <InputCheckbox @bind-Value="holodeck.Type2" />
    </label>
    <button type="submit">Update</button>
    <ValidationMessage For="() => holodeck.Options" />
</EditForm>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    public class Holodeck
    {
        public bool Type1 { get; set; }

        public bool Type2 { get; set; }
        public bool Options => Type1 || Type2;
    }

    private EditContext? editContext;
    private Holodeck holodeck = new();
    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        editContext=new EditContext(holodeck);
        editContext.SetFieldCssClassProvider(new CustomFieldClassProvider());
        editContext.OnValidationRequested+=HandleValidationRequested;
        messageStore=new(editContext);
    }

    private void HandleValidationRequested(object? sender,ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();
        // Custom validation logic
        if (!holodeck.Options)
        {
            messageStore?.Add(() => holodeck.Options, "Select at least one.");
        }
    }

    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called: Processing the form");

        // Process the form
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
