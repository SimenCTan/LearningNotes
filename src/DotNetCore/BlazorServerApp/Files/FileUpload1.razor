@page "/file-upload-1"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ILogger<FileUpload1> Logger
@inject IWebHostEnvironment Enviroment

<h3>Upload Files</h3>
<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize"/>
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if ( isLoading )
{
    <p>Uploading...</p>

}
else
{
    <ul>
        @foreach (var file in loadFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code{
    private List<IBrowserFile> loadFiles = new();
    private long maxFileSize = 1024*15;
    private int maxAllowedFiles=3;
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs eventArgs)
    {
        isLoading=true;
        loadFiles.Clear();
        foreach(var file in eventArgs.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadFiles.Add(file);
                var trustedFileNameForFileStorage=Path.GetRandomFileName();
                var path = Path.Combine(Enviroment.ContentRootPath,Enviroment.EnvironmentName,"unsafe_uploads",trustedFileNameForFileStorage);
                await using var fs = new FileStream(path,FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch(Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }
        isLoading=true;
    }
}
