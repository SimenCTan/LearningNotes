@using Microsoft.AspNetCore.Components.Web
@using System.Globalization
@using Microsoft.AspNetCore.Localization
@namespace BlazorServerApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <style>
        .red {
            color: red
        }
    </style>
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorServerApp.styles.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>

<body>
    @* @{
        this.HttpContext.Response.Cookies.Append(
        CookieRequestCultureProvider.DefaultCookieName,
        CookieRequestCultureProvider.MakeCookieValue(
        new RequestCulture(
        CultureInfo.CurrentCulture,
        CultureInfo.CurrentUICulture)));
        } *@
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    <div id="components-reconnect-modal">
        ...
    </div>

    <script src="_framework/blazor.server.js" autostart="false"></script>
    <script>
        window.setElementText2 = (element, text) => {
            element.innerText = text;
            return text;
        };
        window.addEventListener('pagehide', () => {
            Blazor.disconnect();
        });
        window.addEventListener('beforeunload', function () {
            Blazor.defaultReconnectionHandler._reconnectionDisplay = {};
        });
        Blazor.registerCustomEventType('custompaste', {
            browserEventName: 'paste',
            createEventArgs: event => {
                return {
                    eventTimestamp: new Date(),
                    pastedData: event.clipboardData.getData('text')
                };
            }
        });
        window.convertArray = (win1251Array) => {
            var win1251decoder = new TextDecoder('windows-1251');
            var bytes = new Uint8Array(win1251Array);
            var decodedArray = win1251decoder.decode(bytes);
            console.log(decodedArray);
            return decodedArray;
        };
        window.displayTickerAlert1 = (symbol, price) => {
            alert(`${symbol}: $${price}!`);
        };
        function setElementClass(element, className) {
            var myElement = element;
            myElement.classList.add(className);
        };
        window.returnArrayAsync = () => {
            DotNet.invokeMethodAsync('BlazorServerApp', 'ReturnArrayAsync')
                .then(data => {
                    console.log(data);
                });
        };
        window.updateMessageCaller = (dotnetHelper) => {
            dotnetHelper.invokeMethodAsync('UpdateMessageCaller');
            dotnetHelper.dispose();
        }
        window.sayHello1 = (dotNetHelper, name) => {
            var result = dotNetHelper.invokeMethodAsync('GetHelloMessage', name);
            dotNetHelper.dispose();
            return result;
        };
        window.sendByteArray = () => {
            const data = new Uint8Array([0x45, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69,
                0x6e, 0x67, 0x27, 0x73, 0x20, 0x73, 0x68, 0x69, 0x6e, 0x79, 0x2c,
                0x20, 0x43, 0x61, 0x70, 0x74, 0x69, 0x61, 0x6e, 0x2e, 0x20, 0x4e,
                0x6f, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x72, 0x65, 0x74, 0x2e]);
            DotNet.invokeMethodAsync('BlazorServerApp', 'ReceiveByteArray', data)
                .then(str => {
                    alert(str);
                });
        };
        Blazor.start({
            configureSignalR: function (builder) {
                builder.configureLogging("information");
            },
            reconnectionHandler: {
                onConnectionDown: (options, error) => console.error(error),
                onConnectionUp: () => console.log("Up, up, and away!")
            },
            reconnectionOptions: {
                maxRetries: 3,
                retryIntervalMilliseconds: 2000
            }
        });
    </script>
    <persist-component-state />
</body>

</html>
