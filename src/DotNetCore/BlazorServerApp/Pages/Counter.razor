@page "/counter"
@implements IDisposable
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject StateContainer StateContainer

<PageTitle>Counter</PageTitle>
<h1>Counter</h1>
<p role="status">Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<h1>State Container Example component</h1>
<p>State Container component Property: <b>@StateContainer.Property</b></p>
<p>
    <button @onclick="ChangePropertyValue">
        Change the Property from the State Container Example component
    </button>
</p>
<Nested />

@code {

    private int currentCount = 0;
    protected override async Task OnParametersSetAsync()
    {
        var result = await ProtectedSessionStorage.GetAsync<int>("count");
        currentCount=result.Success?result.Value:0;
    }
    private async Task IncrementCount()
    {
        currentCount++;
        await ProtectedSessionStorage.SetAsync("count",currentCount);
    }

    public void Dispose()
    {
        StateContainer.OnChange-=StateHasChanged;
    }
    protected override void OnInitialized()
    {
        StateContainer.OnChange += StateHasChanged;
    }
    private void ChangePropertyValue()
    {
        StateContainer.Property = "New value set in the State " +
            $"Container Example component: {DateTime.Now}";
    }
}
